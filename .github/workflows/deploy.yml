name: Build and Deploy

on:
  workflow_dispatch:  # Allow manual triggers
    inputs:
      build:
        description: 'Build new images'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ghcr.io/${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ghcr.io/${{ github.repository }}/frontend

jobs:
  build-and-push:
    if: ${{ github.event_name == 'push' || inputs.build != false }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./10xWarehouseNet
          file: ./10xWarehouseNet/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./10xWarehouseAstro/astro-app
          file: ./10xWarehouseAstro/astro-app/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          build-args: |
            API_BASE_URL=/api
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "skipped" ]; then
            echo "ℹ️  Build step was skipped. Deploying using existing images from GHCR."
          else
            echo "✅ Build step completed successfully. Deploying newly built images."
          fi

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SSH_KEY }}

      - name: Add SSH known hosts
        run: |
          ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts

      - name: Prepare docker-compose for deployment
        run: |
          # Replace placeholder with actual repository path
          sed -i "s|REPO_PLACEHOLDER|${{ github.repository }}|g" docker-compose.yml

      - name: Copy docker-compose and nginx config
        env:
          VM_USER: ${{ secrets.AZURE_VM_USER }}
          VM_HOST: ${{ secrets.AZURE_VM_HOST }}
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml nginx.conf "$VM_USER@$VM_HOST:/home/$VM_USER/10xWarehouse/"

      - name: Deploy to Azure VM
        env:
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHCR_USER: ${{ github.actor }}
          VM_USER: ${{ secrets.AZURE_VM_USER }}
          VM_HOST: ${{ secrets.AZURE_VM_HOST }}
          IMAGE_BACKEND: ${{ env.IMAGE_NAME_BACKEND }}:latest
          IMAGE_FRONTEND: ${{ env.IMAGE_NAME_FRONTEND }}:latest
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER || 'postgres' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres' }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB || 'postgres' }}
        run: |
          ssh -o StrictHostKeyChecking=no "$VM_USER@$VM_HOST" << ENDSSH
            set -e
            cd "/home/$VM_USER/10xWarehouse"

            # Login to GHCR using GITHUB_TOKEN
            echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin

            # Stop all containers
            docker-compose down || true

            # Set environment variables for docker-compose
            export SUPABASE_URL="$SUPABASE_URL"
            export SUPABASE_SERVICE_ROLE_KEY="$SUPABASE_SERVICE_ROLE_KEY"
            export SUPABASE_ANON_KEY="$SUPABASE_ANON_KEY"
            export POSTGRES_USER="$POSTGRES_USER"
            export POSTGRES_PASSWORD="$POSTGRES_PASSWORD"
            export POSTGRES_DB="$POSTGRES_DB"

            # Pull latest images
            docker-compose pull

            # Start all containers
            docker-compose up -d

            # Wait for services to be healthy
            echo "Waiting for services to start..."
            sleep 10

            # Verify backend health
            for i in {1..30}; do
              if curl -f -s http://localhost:8080/api/up | grep -q '"status":"up"'; then
                echo "Backend is healthy"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "Backend health check failed"
                exit 1
              fi
              echo "Waiting for backend... ($i/30)"
              sleep 2
            done

            # Cleanup old images
            docker image prune -f

            echo "Deployment completed successfully"
          ENDSSH

      - name: Health Check
        run: |
          sleep 5
          curl -f http://${{ secrets.AZURE_VM_HOST }}/health || exit 1
          echo "Health check passed"

