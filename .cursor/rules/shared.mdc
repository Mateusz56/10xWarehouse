---
alwaysApply: true
---
# AI Rules for {{project-name}}

{{project-description}}

## Tech Stack

- Astro 5
- Javascript
- Vue3
- Tailwind 4

## Project Structure

When introducing changes to the project, always follow the directory structure below:

For backend:
- `./10xWarehouseNet/Controllers` - for rest api controllers
- `./10xWarehouseNet/Repositories` - for logic executed by controllers
- `./10xWarehouseNet/Db` - database files - migrations, data models etc
- `./10xWarehouseNet/Dtos` - dto object for api

For frontend:
- `.10xWarehouseAstro/astro-app/src` - source code
- `.10xWarehouseAstro/astro-app/src/layouts` - Astro layouts
- `.10xWarehouseAstro/astro-app/src/pages` - Astro pages
- `.10xWarehouseAstro/astro-app/src/pages/api` - API endpoints
- `.10xWarehouseAstro/astro-app/src/components` - client-side components written in Astro (static) and React (dynamic)
- `.10xWarehouseAstro/astro-app/src/assets` - static internal assets
- `.10xWarehouseAstro/astro-app/public` - public assets

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Prioritize error handling and edge cases
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
